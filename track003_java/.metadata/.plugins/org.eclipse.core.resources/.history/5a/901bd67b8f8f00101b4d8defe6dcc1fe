package com.company.java006;

import java.time.LocalTime;
import java.text.DecimalFormat;
import java.util.Scanner;

public class Bank100_control {
    public static void main(String[] args) {
        int num = -1;
        String id = "", pass = "";
        double balance = 0;
        Scanner scanner = new Scanner(System.in);

        // 숫자 포맷: 소수점 이하가 .00이면 생략, 아니면 최대 두 자리까지 표시
        DecimalFormat df = new DecimalFormat("#,##0.##");

        for (;;) {
            System.out.print("\n\n== BANK ==" +
                             "\n1. 추가" +
                             "\n2. 조회" +
                             "\n3. 입금" +
                             "\n4. 출금" +
                             "\n5. 삭제" +
                             "\n6. 타행 이체" +
                             "\n9. 종료 > ");
            num = scanner.nextInt();

            if (num == 9) {
                System.out.println("종료합니다.");
                break;
            } 
            else if (num == 1) {
                System.out.print("ID 입력 > ");
                id = scanner.next();
                System.out.print("PASS 입력 > ");
                pass = scanner.next();
                System.out.print("잔액 입력 > ");
                balance = scanner.nextDouble();
                System.out.println("계좌 생성됨. 초기 잔액: " + df.format(balance) + "원");
            } 
            else if (num == 2 || num == 3 || num == 4 || num == 5 || num == 6) {
                // 사용자 인증
                System.out.print("ID 입력 > ");
                String tempId = scanner.next();
                System.out.print("PASS 입력 > ");
                String tempPass = scanner.next();
                if (!(id.equals(tempId) && pass.equals(tempPass))) {
                    System.out.println("아이디와 비밀번호를 확인해주세요!");
                    continue;
                }

                switch (num) {
                    case 2:
                        // 조회
                        System.out.println("\n[조회 결과]");
                        System.out.println("ID: " + id);
                        System.out.println("PASS: " + pass);
                        System.out.println("잔액: " + df.format(balance) + "원");
                        break;

                    case 3:
                        // 입금
                        System.out.print("입금할 금액 > ");
                        double inAmt = scanner.nextDouble();
                        double feeRateIn = 0.05;  // 기본 수수료 5%
                        double feeIn = inAmt * feeRateIn;
                        double netIn = inAmt - feeIn;
                        balance += netIn;
                        System.out.println("[입금 거래]");
                        System.out.println("입금 수수료 명목: 기본 입금 수수료 (" + (int)(feeRateIn * 100) + "%)");
                        System.out.println("입금액: " + df.format(inAmt) + "원, 수수료: " + df.format(feeIn) + "원, 실제 입금된 금액: " + df.format(netIn) + "원");
                        System.out.println("잔액: " + df.format(balance) + "원");
                        break;

                    case 4:
                        // 출금
                        System.out.print("출금할 금액 > ");
                        double outAmt = scanner.nextDouble();
                        if (outAmt > balance) {
                            System.out.println("잔액이 모자랍니다.");
                            continue;
                        }
                        LocalTime now = LocalTime.now();
                        boolean isNight = (now.isAfter(LocalTime.of(22, 0)) || now.isBefore(LocalTime.of(6, 0)));
                        double feeOutRate = isNight ? 0.10 : 0.05;
                        double feeOut = outAmt * feeOutRate;
                        double totalDeduct = outAmt + feeOut;
                        if (totalDeduct > balance) {
                            System.out.println("수수료 포함 출금 후 잔액이 부족합니다.");
                            continue;
                        }
                        System.out.println("[출금 거래]");
                        if (isNight) {
                            System.out.println("출금 수수료 명목: 야간 출금 수수료 (" + (int)(feeOutRate * 100) + "%)");
                        } else {
                            System.out.println("출금 수수료 명목: 기본 출금 수수료 (" + (int)(feeOutRate * 100) + "%)");
                        }
                        System.out.println("출금액: " + df.format(outAmt) + "원, 수수료: " + df.format(feeOut) + "원, 총 차감액: " + df.format(totalDeduct) + "원");
                        balance -= totalDeduct;
                        System.out.println("잔액: " + df.format(balance) + "원");
                        break;

                    case 6:
                        // 타행 이체
                        System.out.print("이체할 금액 > ");
                        double tranAmt = scanner.nextDouble();
                        double feeTranRate = 0.05;
                        double feeTran = tranAmt * feeTranRate;
                        double totalTranDeduct = tranAmt + feeTran + 1000;
                        if (totalTranDeduct > balance) {
                            System.out.println("이체 + 수수료 후 잔액이 부족합니다.");
                            continue;
                        }
                        System.out.println("[타행 이체 거래]");
                        System.out.println("이체 수수료 명목: 기본 이체 수수료 (" + (int)(feeTranRate * 100) + "%) + 타행 추가 수수료 (1,000원)");
                        System.out.println("이체금액: " + df.format(tranAmt) + "원, 기본 수수료: " + df.format(feeTran) + "원, 추가 수수료: 1,000원, 총 차감액: " + df.format(totalTranDeduct) + "원");
                        balance -= totalTranDeduct;
                        System.out.println("잔액: " + df.format(balance) + "원");
                        break;

                    case 5:
                        // 삭제
                        System.out.println("삭제하시겠습니까? (y/n) > ");
                        String answer = scanner.next();
                        if (!answer.toLowerCase().equals("y")) {
                            System.out.println("삭제를 취소했습니다.");
                            continue;
                        }
                        id = pass = "";
                        balance = 0;
                        System.out.println("계좌 삭제됨. 잔액: " + df.format(balance) + "원");
                        break;

                    default:
                        System.out.println("잘못된 입력입니다.");
                        break;
                }
            } 
            else {
                System.out.println("잘못된 입력입니다.");
            }
        }

        scanner.close();
    }
}
